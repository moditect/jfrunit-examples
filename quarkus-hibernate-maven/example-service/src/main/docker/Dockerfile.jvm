####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the docker image run:
#
# mvn package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/flight-recorder-demo-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/flight-recorder-demo-jvm
#
###
# FROM fabric8/java-alpine-openjdk8-jre:1.6.5
# ENV JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
# ENV AB_ENABLED=jmx_exporter

# Be prepared for running in OpenShift too
# RUN adduser -G root --no-create-home --disabled-password 1001 \
#  && chown -R 1001 /deployments \
#  && chmod -R "g+rwX" /deployments \
#  && chown -R 1001:root /deployments

FROM fedora:32

RUN mkdir /tmp/jdk \
     && cd /tmp/jdk \
     && curl -O https://download.java.net/java/GA/jdk15/779bf45e88a44cbd9ea6621d33e33db1/36/GPL/openjdk-15_linux-x64_bin.tar.gz \
     && tar -xvf openjdk-15_linux-x64_bin.tar.gz

COPY target/lib/* /deployments/lib/
COPY target/*-runner.jar /deployments/app.jar
EXPOSE 8080

# run with user 1001
# USER 1001

ENTRYPOINT [ "/tmp/jdk/jdk-15/bin/java", "-Dcom.sun.management.jmxremote", "-Dcom.sun.management.jmxremote.port=1898", "-Dcom.sun.management.jmxremote.rmi.port=1898", "-Djava.rmi.server.hostname=0.0.0.0", "-Dcom.sun.management.jmxremote.ssl=false", "-Dcom.sun.management.jmxremote.authenticate=false", "-Dcom.sun.management.jmxremote.local.only=false", "-jar", "/deployments/app.jar", "-Dquarkus.http.host=0.0.0.0", "-Djava.util.logging.manager=org.jboss.logmanager.LogManager" ]
